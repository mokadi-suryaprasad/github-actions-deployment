name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  
  pull_request:
    branches: [main]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, please add tests in a real project"

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=my-project-key \
            -Dsonar.organization=my-org \
            -Dsonar.sources=./src \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Checking SonarQube Quality Gate Status..."
          for i in {1..10}; do
            RESPONSE=$(curl -s -X GET "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=my-project-key" \
              -H "Authorization: Bearer ${SONAR_TOKEN}")
    
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status' 2>/dev/null)
    
            if [[ -z "$STATUS" || "$STATUS" == "null" ]]; then
              echo "Warning: Unable to fetch SonarQube Quality Gate status. Response: $RESPONSE"
              exit 1
            fi
    
            if [ "$STATUS" == "OK" ]; then
              echo "SonarQube Quality Gate PASSED!"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "SonarQube Quality Gate FAILED!"
              exit 1
            else
              echo "SonarQube status: $STATUS. Retrying in 15 seconds... ($i/10)"
              sleep 15
            fi
          done
    
          echo "Timed out waiting for SonarQube Quality Gate."
          exit 1
          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [sonar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: docker.io
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITH_TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "MSR"
          git config user.email "mspr9773@gmail.com"
      
          - name: Update Kubernetes deployment file
          env:
            IMAGE_TAG: sha-${{ github.sha }}
            REGISTRY: docker.io
          run: |
            NEW_IMAGE="${REGISTRY}/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${IMAGE_TAG}"
            echo "Updating deployment.yaml with image: ${NEW_IMAGE}"
        
            # Debug: Print the existing image before replacing
            echo "Before Update:"
            grep "image:" kubernetes/deployment.yaml || echo "No image field found!"
        
            # Ensure correct replacement
            sed -i "s|image: .*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
        
            # Debug: Print the file after updating
            echo "After Update:"
            grep "image:" kubernetes/deployment.yaml || echo "No image field found!"
        
        - name: Commit and push changes
          run: |
            git add kubernetes/deployment.yaml
            git commit -m "Update Kubernetes deployment with new image tag: ${{ env.IMAGE_TAG }} [skip ci]" || echo "No changes to commit"
            git push
        

  notify-success:
    name: Notify Slack on Success
    runs-on: ubuntu-latest
    needs: [update-k8s]
    if: success()
    steps:
      - name: Send success message to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#36A64F"
          SLACK_MESSAGE: "CI/CD Pipeline completed successfully!"

  notify-failure:
    name: Notify Slack on Failure
    runs-on: ubuntu-latest
    needs: [test, sonar, build, docker, update-k8s]
    if: failure()
    steps:
      - name: Send failure message to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#FF0000"
          SLACK_MESSAGE: "CI/CD Pipeline Failed! Check logs for details."
