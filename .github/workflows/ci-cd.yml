name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Prevents CI loops
  pull_request:
    branches: [main]

jobs:
  # Unit Testing
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests found"

  # Static Code Analysis
  sonar:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL}}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=my-project-key \
            -Dsonar.organization=my-org \
            -Dsonar.sources=./src \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

  # Build Process
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, sonar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # Docker Build and Push (Docker Hub)
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      image_tag: sha-${{ github.sha }}
    env:
      REGISTRY: docker.io
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

  # Kubernetes Deployment Update
  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      IMAGE_TAG: sha-${{ github.sha }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      REGISTRY: docker.io
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}

      - name: Update Kubernetes deployment file
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
          
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: $IMAGE_TAG [skip ci]" || echo "No changes to commit"
          git push

  # Final Success Notification
  notify-success:
    name: Notify Slack on Success
    runs-on: ubuntu-latest
    needs: [update-k8s]
    if: success()
    steps:
      - name: Send success message to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#36A64F"
          SLACK_MESSAGE: "CI/CD Pipeline completed successfully!"
